name: Backport
description: Backport changes to another release branch.
inputs:
  label:
    description: The trigger label (i.e., v2.0, v1.18)
    required: true
  base_branch:
    description: The base branch to backport to (i.e., solana-v2.0, solana-v1.18)
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Fetch pull request data
      env:
        GH_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        # Get the latest commit.
        MERGE_COMMIT=${{ github.sha }}
        echo "merge commit: $MERGE_COMMIT"
        echo "MERGE_COMMIT=$MERGE_COMMIT" >> $GITHUB_ENV

        # Find the pull request associated with the squashed merge commit.
        # DELETE BELOW LINE and use MERGE_COMMIT instead.
        MAIN_HEAD="237b5907a1cd840b90969dd0ccf6368852f7ef1a"
        echo "Looking for PR associated with commit $MAIN_HEAD... with label ${{ inputs.label }}"
        PR=$(gh pr list --state merged --json number,title,headRefName,mergeCommit,labels \
            --jq ".[] | select(.mergeCommit.oid == \"$MAIN_HEAD\" and (.labels[].name | contains(\"${{ inputs.label }}\")))")
        
        if [[ -n "$PR" ]]; then
          echo "Pull Request found:"
          echo "$PR"
          echo "BACKPORT=true" >> $GITHUB_ENV
          echo "Will backport to ${{ inputs.base_branch }}"
        else
          echo "No backport detected."
        fi

    - name: Backport changes
      if: ${{ env.BACKPORT == 'true' }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git fetch --all

        # Create a new branch off the specified base branch.
        BASE_BRANCH="${{ inputs.base_branch }}"
        BACKPORT_BRANCH="backport-${{ env.PR_NUMBER }}-to-${{ inputs.base_branch }}"
        git checkout $BASE_BRANCH
        git checkout -b $BACKPORT_BRANCH

        # Cherry-pick the merge commit.
        git cherry-pick $MERGE_COMMIT || (git cherry-pick --abort && exit 1)

        git push origin $BACKPORT_BRANCH

        # Create a pull request.
        gh pr create \
          --base $BASE_BRANCH \
          --head $BACKPORT_BRANCH \
          --title "Backport PR #${{ env.PR_NUMBER }} to $BASE_BRANCH" \
          --body "This is an automated backport of PR #${{ env.PR_NUMBER }} to the $BASE_BRANCH branch."
      outputs:
        result: "Backport successful!"
